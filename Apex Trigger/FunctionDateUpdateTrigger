// Prerequisites :
// Create a new Email feild in the function participant object otherwise this apex trigger will fail.

trigger FunctionDateUpdateTrigger on Function__c (after update) {
    Set<Id> functionIds = new Set<Id>();
    List<Function_Participant__c> participantsToSendNotification = new List<Function_Participant__c>();

    // Check if Event Date has been modified and collect Event IDs
    for (Function__c function : Trigger.new) {
        Function__c oldFunction = Trigger.oldMap.get(function.Id);
        if (function.Start_DateTime__c != oldFunction.Start_DateTime__c) {
            functionIds.add(function.Id);
        }
    }

    // Retrieve the related Participant records
    List<Function_Participant__c> participants = [SELECT Id, Name, Email__c FROM Function_Participant__c WHERE Function__c IN :functionIds];

    // Add Participants to the list for sending notifications
    participantsToSendNotification.addAll(participants);

    // Send notifications to each Participant
    for (Function_Participant__c participant : participantsToSendNotification) {
        sendNotification(participant);
    }


public static void sendNotification(Function_Participant__c participant) {
    // Add your logic here to send the notification to the Participant
    // using the provided participant details (e.g., Name, Email__c).
    
    // Construct the email message
    Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
    
    // Set the recipient's email address
    email.setToAddresses(new List<String>{participant.Email__c});
    
    // Set the email subject and body
    email.setSubject('Event Date Update Notification');
    email.setPlainTextBody('Dear ' + participant.Name + ',\n\nThe date of the event you are participating in has been updated. Please take note of the changes.\n\nThank you.');
    
    // Send the email using the default email sender
    Messaging.SendEmailResult[] emailResults = Messaging.sendEmail(new List<Messaging.SingleEmailMessage>{email});
    
    // Check the email sending results
    for (Messaging.SendEmailResult result : emailResults) {
        if (result.isSuccess()) {
            System.debug('Notification email sent successfully to: ' + participant.Email__c);
        } else {
            System.debug('Failed to send notification email to: ' + participant.Email__c + ', Error: ' + result.getErrors()[0].getMessage());
        }
    }
}
}

